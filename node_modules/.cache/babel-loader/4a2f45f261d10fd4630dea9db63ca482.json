{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\minh100\\\\Desktop\\\\Comp\\\\Projects\\\\my-list\\\\src\\\\Global\\\\GlobalState.js\";\n// import React, { createContext, useReducer, useEffect } from 'react';\n// import AppReducer from './AppReducer.js';\n// // initalizes the state\n// // if there are objects in localstorage \n// // else assign empty arrays\n// const initalState = {\n//     activeAnimeList: localStorage.getItem('activeAnimeList') ?\n//         JSON.parse(localStorage.getItem('activeAnimeList')) : [],\n//     finishedAnimeList: localStorage.getItem('finishedAnimeList') ?\n//         JSON.parse(localStorage.getItem('finishedAnimeList')) : [],\n// };\n// // create context\n// export const GlobalContext = createContext(initalState);\n// // provider components\n// export const GlobalProvider = props => {\n//     const [state, dispatch] = useReducer(AppReducer, initalState);\n//     // stores lists in local storage\n//     useEffect(() => {\n//         localStorage.setItem('activeAnimeList', JSON.stringify(state.activeAnimeList));\n//         localStorage.setItem('finishedAnimeList', JSON.stringify(state.finishedAnimeList));\n//     }, [state])\n//     // actions\n//     // adds anime to watch list\n//     const addAnimeToActive = anime => {\n//         dispatch({ type: \"ADD_ANIME_TO_ACTIVE\", payload: anime });\n//     };\n//     // removes anime from both active and finished list\n//     const removeAnimeBothList = id => {\n//         dispatch({ type: \"REMOVE_ANIME_BOTH_LIST\", payload: id });\n//     };\n//     // moves anime to active from finished\n//     const moveAnimeToActive = anime => {\n//         dispatch({ type: \"MOVE_ANIME_TO_ACTIVE\", payload: anime });\n//     };\n//     // move anime from finished to active\n//     const moveAnimeToFinish = anime => {\n//         dispatch({ type: \"MOVE_ANIME_TO_FINISH\", payload: anime });\n//     };\n//     return (\n//         <GlobalContext.Provider\n//             value={{\n//                 activeAnimeList: state.activeAnimeList,\n//                 finishedAnimeList: state.finishedAnimeList,\n//                 addAnimeToActive,\n//                 removeAnimeBothList,\n//                 moveAnimeToActive,\n//                 moveAnimeToFinish,\n//             }}>\n//             {props.children}\n//         </GlobalContext.Provider>\n//     )\n// }\nimport React, { createContext, useReducer, useEffect } from 'react';\nimport AppReducer from './AppReducer.js'; //inital state\n\nconst initialState = {\n  watchlist: localStorage.getItem('watchlist') ? JSON.parse(localStorage.getItem('watchlist')) : [],\n  watched: localStorage.getItem('watched') ? JSON.parse(localStorage.getItem('watched')) : []\n}; //create context\n\nexport const GlobalContext = createContext(initialState); //provider components\n\nexport const GlobalProvider = props => {\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n  useEffect(() => {\n    localStorage.setItem('watchlist', JSON.stringify(state.watchlist));\n    localStorage.setItem('watched', JSON.stringify(state.watched));\n  }, [state]); //actions\n\n  const addToWatchList = anime => {\n    dispatch({\n      type: \"ADD_TO_WATCH_LIST\",\n      payload: anime\n    });\n  };\n\n  const removeFromWatchList = id => {\n    dispatch({\n      type: \"REMOVE_FROM_WATCH_LIST\",\n      payload: id\n    });\n  };\n\n  const moveToWatched = anime => {\n    dispatch({\n      type: \"MOVE_TO_WATCHED\",\n      payload: anime\n    });\n  };\n\n  const moveToWatching = anime => {\n    dispatch({\n      type: \"MOVE_TO_WATCHING\",\n      payload: anime\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(GlobalContext.Provider, {\n    value: {\n      watchlist: state.watchlist,\n      watched: state.watched,\n      addToWatchList,\n      removeFromWatchList,\n      moveToWatched,\n      moveToWatching\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, props.children);\n};","map":{"version":3,"sources":["C:/Users/minh100/Desktop/Comp/Projects/my-list/src/Global/GlobalState.js"],"names":["React","createContext","useReducer","useEffect","AppReducer","initialState","watchlist","localStorage","getItem","JSON","parse","watched","GlobalContext","GlobalProvider","props","state","dispatch","setItem","stringify","addToWatchList","anime","type","payload","removeFromWatchList","id","moveToWatched","moveToWatching","children"],"mappings":";AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,SAA3C,QAA4D,OAA5D;AACA,OAAOC,UAAP,MAAuB,iBAAvB,C,CACA;;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,SAAS,EAAEC,YAAY,CAACC,OAAb,CAAqB,WAArB,IACPC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CADO,GACyC,EAFnC;AAGjBG,EAAAA,OAAO,EAAEJ,YAAY,CAACC,OAAb,CAAqB,SAArB,IACLC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CADK,GACyC;AAJjC,CAArB,C,CAOA;;AAEA,OAAO,MAAMI,aAAa,GAAGX,aAAa,CAACI,YAAD,CAAnC,C,CAEP;;AAEA,OAAO,MAAMQ,cAAc,GAAGC,KAAK,IAAI;AACnC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,UAAU,CAACE,UAAD,EAAaC,YAAb,CAApC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,YAAY,CAACU,OAAb,CAAqB,WAArB,EAAkCR,IAAI,CAACS,SAAL,CAAeH,KAAK,CAACT,SAArB,CAAlC;AACAC,IAAAA,YAAY,CAACU,OAAb,CAAqB,SAArB,EAAgCR,IAAI,CAACS,SAAL,CAAeH,KAAK,CAACJ,OAArB,CAAhC;AACH,GAHQ,EAGN,CAACI,KAAD,CAHM,CAAT,CAHmC,CAQnC;;AACA,QAAMI,cAAc,GAAGC,KAAK,IAAI;AAC5BJ,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAE,mBAAR;AAA6BC,MAAAA,OAAO,EAAEF;AAAtC,KAAD,CAAR;AACH,GAFD;;AAIA,QAAMG,mBAAmB,GAAIC,EAAD,IAAQ;AAChCR,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAE,wBAAR;AAAkCC,MAAAA,OAAO,EAAEE;AAA3C,KAAD,CAAR;AACH,GAFD;;AAIA,QAAMC,aAAa,GAAGL,KAAK,IAAI;AAC3BJ,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAE,iBAAR;AAA2BC,MAAAA,OAAO,EAAEF;AAApC,KAAD,CAAR;AACH,GAFD;;AAIA,QAAMM,cAAc,GAAGN,KAAK,IAAI;AAC5BJ,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAE,kBAAR;AAA4BC,MAAAA,OAAO,EAAEF;AAArC,KAAD,CAAR;AACH,GAFD;;AAIA,sBACI,oBAAC,aAAD,CAAe,QAAf;AACI,IAAA,KAAK,EAAE;AACHd,MAAAA,SAAS,EAAES,KAAK,CAACT,SADd;AAEHK,MAAAA,OAAO,EAAEI,KAAK,CAACJ,OAFZ;AAGHQ,MAAAA,cAHG;AAIHI,MAAAA,mBAJG;AAKHE,MAAAA,aALG;AAMHC,MAAAA;AANG,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASKZ,KAAK,CAACa,QATX,CADJ;AAaH,CAtCM","sourcesContent":["// import React, { createContext, useReducer, useEffect } from 'react';\r\n// import AppReducer from './AppReducer.js';\r\n\r\n// // initalizes the state\r\n// // if there are objects in localstorage \r\n// // else assign empty arrays\r\n// const initalState = {\r\n//     activeAnimeList: localStorage.getItem('activeAnimeList') ?\r\n//         JSON.parse(localStorage.getItem('activeAnimeList')) : [],\r\n//     finishedAnimeList: localStorage.getItem('finishedAnimeList') ?\r\n//         JSON.parse(localStorage.getItem('finishedAnimeList')) : [],\r\n// };\r\n\r\n// // create context\r\n// export const GlobalContext = createContext(initalState);\r\n\r\n// // provider components\r\n// export const GlobalProvider = props => {\r\n//     const [state, dispatch] = useReducer(AppReducer, initalState);\r\n\r\n//     // stores lists in local storage\r\n//     useEffect(() => {\r\n//         localStorage.setItem('activeAnimeList', JSON.stringify(state.activeAnimeList));\r\n//         localStorage.setItem('finishedAnimeList', JSON.stringify(state.finishedAnimeList));\r\n//     }, [state])\r\n\r\n//     // actions\r\n//     // adds anime to watch list\r\n//     const addAnimeToActive = anime => {\r\n//         dispatch({ type: \"ADD_ANIME_TO_ACTIVE\", payload: anime });\r\n//     };\r\n//     // removes anime from both active and finished list\r\n//     const removeAnimeBothList = id => {\r\n//         dispatch({ type: \"REMOVE_ANIME_BOTH_LIST\", payload: id });\r\n//     };\r\n//     // moves anime to active from finished\r\n//     const moveAnimeToActive = anime => {\r\n//         dispatch({ type: \"MOVE_ANIME_TO_ACTIVE\", payload: anime });\r\n//     };\r\n//     // move anime from finished to active\r\n//     const moveAnimeToFinish = anime => {\r\n//         dispatch({ type: \"MOVE_ANIME_TO_FINISH\", payload: anime });\r\n//     };\r\n\r\n//     return (\r\n//         <GlobalContext.Provider\r\n//             value={{\r\n//                 activeAnimeList: state.activeAnimeList,\r\n//                 finishedAnimeList: state.finishedAnimeList,\r\n//                 addAnimeToActive,\r\n//                 removeAnimeBothList,\r\n//                 moveAnimeToActive,\r\n//                 moveAnimeToFinish,\r\n//             }}>\r\n//             {props.children}\r\n//         </GlobalContext.Provider>\r\n//     )\r\n// }\r\n\r\nimport React, { createContext, useReducer, useEffect } from 'react';\r\nimport AppReducer from './AppReducer.js';\r\n//inital state\r\n\r\nconst initialState = {\r\n    watchlist: localStorage.getItem('watchlist') ?\r\n        JSON.parse(localStorage.getItem('watchlist')) : [],\r\n    watched: localStorage.getItem('watched') ?\r\n        JSON.parse(localStorage.getItem('watched')) : [],\r\n};\r\n\r\n//create context\r\n\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n//provider components\r\n\r\nexport const GlobalProvider = props => {\r\n    const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('watchlist', JSON.stringify(state.watchlist));\r\n        localStorage.setItem('watched', JSON.stringify(state.watched));\r\n    }, [state])\r\n\r\n    //actions\r\n    const addToWatchList = anime => {\r\n        dispatch({ type: \"ADD_TO_WATCH_LIST\", payload: anime });\r\n    };\r\n\r\n    const removeFromWatchList = (id) => {\r\n        dispatch({ type: \"REMOVE_FROM_WATCH_LIST\", payload: id });\r\n    }\r\n\r\n    const moveToWatched = anime => {\r\n        dispatch({ type: \"MOVE_TO_WATCHED\", payload: anime});\r\n    }\r\n\r\n    const moveToWatching = anime => {\r\n        dispatch({ type: \"MOVE_TO_WATCHING\", payload: anime});\r\n    }\r\n\r\n    return (\r\n        <GlobalContext.Provider\r\n            value={{\r\n                watchlist: state.watchlist,\r\n                watched: state.watched,\r\n                addToWatchList,\r\n                removeFromWatchList,\r\n                moveToWatched,\r\n                moveToWatching,\r\n            }}>\r\n            {props.children}\r\n        </GlobalContext.Provider>\r\n    )\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}