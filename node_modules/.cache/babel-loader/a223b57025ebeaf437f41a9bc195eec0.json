{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\minh100\\\\Desktop\\\\Comp\\\\Projects\\\\my-list\\\\src\\\\Global\\\\GlobalState.js\";\nimport React, { createContext, useReducer, useEffect } from 'react';\nimport AppReducer from './AppReducer.js'; // initalizes the state\n// if there are objects in localstorage \n// else assign empty arrays\n\nconst initalState = {\n  activeAnimeList: localStorage.getItem('activeAnimeList') ? JSON.parse(localStorage.getItem('activeAnimeList')) : [],\n  finishedAnimeList: localStorage.getItem('finishedAnimeList') ? JSON.parse(localStorage.getItem('finishedAnimeList')) : []\n}; // create context\n\nexport const GlobalContext = createContext(initalState); // provider components\n\nexport const GlobalProvider = props => {\n  const [state, dispatch] = useReducer(AppReducer, initalState); // stores lists in local storage\n\n  useEffect(() => {\n    localStorage.setItem('activeAnimeList', JSON.stringify(state.activeAnimeList));\n    localStorage.setItem('finishedAnimeList', JSON.stringify(state.finishedAnimeList));\n  }, [state]); // actions\n  // adds anime to watch list\n\n  const addAnimeToActive = anime => {\n    dispatch({\n      type: \"ADD_ANIME_TO_ACTIVE\",\n      payload: anime\n    });\n  }; // removes anime from both active and finished list\n\n\n  const removeAnimeBothList = id => {\n    dispatch({\n      type: \"REMOVE_ANIME_BOTH_LIST\",\n      payload: id\n    });\n  }; // moves anime to active from finished\n\n\n  const moveAnimeToActive = anime => {\n    dispatch({\n      type: \"MOVE_ANIME_TO_ACTIVE\",\n      payload: anime\n    });\n  }; // move anime from finished to active\n\n\n  const moveAnimeToFinish = anime => {\n    dispatch({\n      type: \"MOVE_ANIME_TO_FINISH\",\n      payload: anime\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(GlobalContext.Provider, {\n    value: {\n      activeAnimeList: state.activeAnimeList,\n      finishedAnimeList: state.finishedAnimeList,\n      addAnimeToActive,\n      removeAnimeBothList,\n      moveAnimeToActive,\n      moveAnimeToFinish\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, props.children);\n}; // import React, { createContext, useReducer, useEffect } from 'react';\n// import AppReducer from './AppReducer.js';\n// //inital state\n// const initialState = {\n//     activeAnimeList: localStorage.getItem('activeAnimeList') ?\n//         JSON.parse(localStorage.getItem('activeAnimeList')) : [],\n//     watched: localStorage.getItem('watched') ?\n//         JSON.parse(localStorage.getItem('watched')) : [],\n// };\n// //create context\n// export const GlobalContext = createContext(initialState);\n// //provider components\n// export const GlobalProvider = props => {\n//     const [state, dispatch] = useReducer(AppReducer, initialState);\n//     useEffect(() => {\n//         localStorage.setItem('activeAnimeList', JSON.stringify(state.activeAnimeList));\n//         localStorage.setItem('watched', JSON.stringify(state.watched));\n//     }, [state])\n//     //actions\n//     const addToWatchList = anime => {\n//         dispatch({ type: \"ADD_TO_WATCH_LIST\", payload: anime });\n//     };\n//     const removeFromWatchList = (id) => {\n//         dispatch({ type: \"REMOVE_FROM_WATCH_LIST\", payload: id });\n//     }\n//     const moveToWatched = anime => {\n//         dispatch({ type: \"MOVE_TO_WATCHED\", payload: anime});\n//     }\n//     const moveToWatching = anime => {\n//         dispatch({ type: \"MOVE_TO_WATCHING\", payload: anime});\n//     }\n//     return (\n//         <GlobalContext.Provider\n//             value={{\n//                 activeAnimeList: state.activeAnimeList,\n//                 watched: state.watched,\n//                 addToWatchList,\n//                 removeFromWatchList,\n//                 moveToWatched,\n//                 moveToWatching,\n//             }}>\n//             {props.children}\n//         </GlobalContext.Provider>\n//     )\n// }","map":{"version":3,"sources":["C:/Users/minh100/Desktop/Comp/Projects/my-list/src/Global/GlobalState.js"],"names":["React","createContext","useReducer","useEffect","AppReducer","initalState","activeAnimeList","localStorage","getItem","JSON","parse","finishedAnimeList","GlobalContext","GlobalProvider","props","state","dispatch","setItem","stringify","addAnimeToActive","anime","type","payload","removeAnimeBothList","id","moveAnimeToActive","moveAnimeToFinish","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,SAA3C,QAA4D,OAA5D;AACA,OAAOC,UAAP,MAAuB,iBAAvB,C,CAEA;AACA;AACA;;AACA,MAAMC,WAAW,GAAG;AAChBC,EAAAA,eAAe,EAAEC,YAAY,CAACC,OAAb,CAAqB,iBAArB,IACbC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CADa,GACyC,EAF1C;AAGhBG,EAAAA,iBAAiB,EAAEJ,YAAY,CAACC,OAAb,CAAqB,mBAArB,IACfC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,mBAArB,CAAX,CADe,GACyC;AAJ5C,CAApB,C,CAOA;;AACA,OAAO,MAAMI,aAAa,GAAGX,aAAa,CAACI,WAAD,CAAnC,C,CAEP;;AACA,OAAO,MAAMQ,cAAc,GAAGC,KAAK,IAAI;AACnC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,UAAU,CAACE,UAAD,EAAaC,WAAb,CAApC,CADmC,CAGnC;;AACAF,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,YAAY,CAACU,OAAb,CAAqB,iBAArB,EAAwCR,IAAI,CAACS,SAAL,CAAeH,KAAK,CAACT,eAArB,CAAxC;AACAC,IAAAA,YAAY,CAACU,OAAb,CAAqB,mBAArB,EAA0CR,IAAI,CAACS,SAAL,CAAeH,KAAK,CAACJ,iBAArB,CAA1C;AACH,GAHQ,EAGN,CAACI,KAAD,CAHM,CAAT,CAJmC,CASnC;AACA;;AACA,QAAMI,gBAAgB,GAAGC,KAAK,IAAI;AAC9BJ,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAE,qBAAR;AAA+BC,MAAAA,OAAO,EAAEF;AAAxC,KAAD,CAAR;AACH,GAFD,CAXmC,CAcnC;;;AACA,QAAMG,mBAAmB,GAAGC,EAAE,IAAI;AAC9BR,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAE,wBAAR;AAAkCC,MAAAA,OAAO,EAAEE;AAA3C,KAAD,CAAR;AACH,GAFD,CAfmC,CAkBnC;;;AACA,QAAMC,iBAAiB,GAAGL,KAAK,IAAI;AAC/BJ,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAE,sBAAR;AAAgCC,MAAAA,OAAO,EAAEF;AAAzC,KAAD,CAAR;AACH,GAFD,CAnBmC,CAsBnC;;;AACA,QAAMM,iBAAiB,GAAGN,KAAK,IAAI;AAC/BJ,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAE,sBAAR;AAAgCC,MAAAA,OAAO,EAAEF;AAAzC,KAAD,CAAR;AACH,GAFD;;AAIA,sBACI,oBAAC,aAAD,CAAe,QAAf;AACI,IAAA,KAAK,EAAE;AACHd,MAAAA,eAAe,EAAES,KAAK,CAACT,eADpB;AAEHK,MAAAA,iBAAiB,EAAEI,KAAK,CAACJ,iBAFtB;AAGHQ,MAAAA,gBAHG;AAIHI,MAAAA,mBAJG;AAKHE,MAAAA,iBALG;AAMHC,MAAAA;AANG,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASKZ,KAAK,CAACa,QATX,CADJ;AAaH,CAxCM,C,CA0CP;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { createContext, useReducer, useEffect } from 'react';\r\nimport AppReducer from './AppReducer.js';\r\n\r\n// initalizes the state\r\n// if there are objects in localstorage \r\n// else assign empty arrays\r\nconst initalState = {\r\n    activeAnimeList: localStorage.getItem('activeAnimeList') ?\r\n        JSON.parse(localStorage.getItem('activeAnimeList')) : [],\r\n    finishedAnimeList: localStorage.getItem('finishedAnimeList') ?\r\n        JSON.parse(localStorage.getItem('finishedAnimeList')) : [],\r\n};\r\n\r\n// create context\r\nexport const GlobalContext = createContext(initalState);\r\n\r\n// provider components\r\nexport const GlobalProvider = props => {\r\n    const [state, dispatch] = useReducer(AppReducer, initalState);\r\n\r\n    // stores lists in local storage\r\n    useEffect(() => {\r\n        localStorage.setItem('activeAnimeList', JSON.stringify(state.activeAnimeList));\r\n        localStorage.setItem('finishedAnimeList', JSON.stringify(state.finishedAnimeList));\r\n    }, [state])\r\n\r\n    // actions\r\n    // adds anime to watch list\r\n    const addAnimeToActive = anime => {\r\n        dispatch({ type: \"ADD_ANIME_TO_ACTIVE\", payload: anime });\r\n    };\r\n    // removes anime from both active and finished list\r\n    const removeAnimeBothList = id => {\r\n        dispatch({ type: \"REMOVE_ANIME_BOTH_LIST\", payload: id });\r\n    };\r\n    // moves anime to active from finished\r\n    const moveAnimeToActive = anime => {\r\n        dispatch({ type: \"MOVE_ANIME_TO_ACTIVE\", payload: anime });\r\n    };\r\n    // move anime from finished to active\r\n    const moveAnimeToFinish = anime => {\r\n        dispatch({ type: \"MOVE_ANIME_TO_FINISH\", payload: anime });\r\n    };\r\n\r\n    return (\r\n        <GlobalContext.Provider\r\n            value={{\r\n                activeAnimeList: state.activeAnimeList,\r\n                finishedAnimeList: state.finishedAnimeList,\r\n                addAnimeToActive,\r\n                removeAnimeBothList,\r\n                moveAnimeToActive,\r\n                moveAnimeToFinish,\r\n            }}>\r\n            {props.children}\r\n        </GlobalContext.Provider>\r\n    )\r\n}\r\n\r\n// import React, { createContext, useReducer, useEffect } from 'react';\r\n// import AppReducer from './AppReducer.js';\r\n// //inital state\r\n\r\n// const initialState = {\r\n//     activeAnimeList: localStorage.getItem('activeAnimeList') ?\r\n//         JSON.parse(localStorage.getItem('activeAnimeList')) : [],\r\n//     watched: localStorage.getItem('watched') ?\r\n//         JSON.parse(localStorage.getItem('watched')) : [],\r\n// };\r\n\r\n// //create context\r\n\r\n// export const GlobalContext = createContext(initialState);\r\n\r\n// //provider components\r\n\r\n// export const GlobalProvider = props => {\r\n//     const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n//     useEffect(() => {\r\n//         localStorage.setItem('activeAnimeList', JSON.stringify(state.activeAnimeList));\r\n//         localStorage.setItem('watched', JSON.stringify(state.watched));\r\n//     }, [state])\r\n\r\n//     //actions\r\n//     const addToWatchList = anime => {\r\n//         dispatch({ type: \"ADD_TO_WATCH_LIST\", payload: anime });\r\n//     };\r\n\r\n//     const removeFromWatchList = (id) => {\r\n//         dispatch({ type: \"REMOVE_FROM_WATCH_LIST\", payload: id });\r\n//     }\r\n\r\n//     const moveToWatched = anime => {\r\n//         dispatch({ type: \"MOVE_TO_WATCHED\", payload: anime});\r\n//     }\r\n\r\n//     const moveToWatching = anime => {\r\n//         dispatch({ type: \"MOVE_TO_WATCHING\", payload: anime});\r\n//     }\r\n\r\n//     return (\r\n//         <GlobalContext.Provider\r\n//             value={{\r\n//                 activeAnimeList: state.activeAnimeList,\r\n//                 watched: state.watched,\r\n//                 addToWatchList,\r\n//                 removeFromWatchList,\r\n//                 moveToWatched,\r\n//                 moveToWatching,\r\n//             }}>\r\n//             {props.children}\r\n//         </GlobalContext.Provider>\r\n//     )\r\n// }"]},"metadata":{},"sourceType":"module"}